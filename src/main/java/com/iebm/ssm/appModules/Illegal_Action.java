package com.iebm.ssm.appModules;import com.iebm.ssm.pageObjects.IllegalPage;import com.iebm.ssm.request.IllegalQuery;import com.iebm.ssm.util.Constant;import com.iebm.ssm.util.SelectOperate;import com.iebm.ssm.util.Table;import com.iebm.ssm.util.UpdateAttribute;import org.openqa.selenium.WebDriver;import org.openqa.selenium.interactions.Actions;import org.openqa.selenium.support.ui.Select;import java.util.HashMap;import java.util.Map;/* *TODO *LC *下午3:41:06 */public class Illegal_Action {    private IllegalPage page;    public Illegal_Action() {        // TODO Auto-generated constructor stub        page = new IllegalPage();    }    /**     *     * @throws Exception     *             TODO 进入疑点查询页面 LC 上午10:34:30     */    public void openPage() throws Exception {        page.nav().click();        Thread.sleep(300);        page.title().click();        Thread.sleep(3000);    }    /**     * 设置出院日期     * @param startdate,enddate     * @throws Exception     */    public void setStartDate(String startdate,String enddate) throws Exception {        UpdateAttribute.removeAttribute(Constant.driver, page.startdate(), "readonly");        page.startdate().clear();        page.startdate().sendKeys(startdate);        UpdateAttribute.removeAttribute(Constant.driver, page.enddate(), "readonly");        page.enddate().clear();        page.enddate().sendKeys(enddate);    }    public void setCondition(String hospital,String hospitallevel,String disease,String handleState,String startdate,String enddate,String ruleNum,String siCode,String illegalClass,String insuredName) throws Exception {        if(hospital!=null) {            page.hospitalbtn().click();            HospitalSelect_Action hospitalSelect_action = new HospitalSelect_Action();            hospitalSelect_action.findHospital(hospital);        }        if(hospitallevel!=null){//            page.hospitalLevel().click();//            SelectOperate selectOperate = new SelectOperate(page.hospitalLevel());//            selectOperate.operateSelectDemo();            Select select = new Select(page.hospitalLevel());            select.selectByVisibleText(hospitallevel);        }        if(disease!=null){            page.diseasebtn().click();            DiseaseSelect_Action diseaseSelect_action = new DiseaseSelect_Action();            diseaseSelect_action.finddisease(disease);        }        if(handleState!=null){            Select select = new Select(page.handleState());            select.selectByVisibleText(handleState);        }        if(startdate!=null){           this.setStartDate(startdate, enddate );        }        if(ruleNum!=null){            Select select = new Select(page.ruleNum());            select.selectByVisibleText(ruleNum);        }        if(siCode!=null){            page.siCode().sendKeys(siCode);        }        if(illegalClass!=null){            Select select = new Select(page.illegalClass());            select.selectByVisibleText(illegalClass);        }        if(insuredName!=null){            page.insuredName().sendKeys(insuredName);        }        page.querybtn().click();    }    /**     * 点击查询按钮     * @throws Exception     */    public void query() throws Exception {        page.querybtn().click();    }    public void readTable() throws Exception {        int totalPages = Integer.parseInt(page.totalPages().getText());//		int currentPage = Integer.parseInt(page.currentPage().getText());        for(int pageNo=1;pageNo<=totalPages;pageNo++){            System.out.println(page.table().getText());            page.nextPage().click();            Thread.sleep(500);        }    }    public void readTableRow() throws Exception{        Table table = new Table(page.table());        Actions builder = new Actions(Constant.driver);        int totalPages = Integer.parseInt(page.totalPages().getText());        for(int pageNo=1;pageNo<=totalPages;pageNo++){            Thread.sleep(1000);            int rowCount = table.getRowCount();            for (int i = 1; i < rowCount; i++) {				System.out.println("第"+pageNo+"页，第"+i+"行数据");                builder.doubleClick(table.getRow(i)).build().perform();                QuestionDetail_Action qa = new QuestionDetail_Action();                qa.getBaseInfo();                qa.getChargeList();                page.tab().click();            }            page.nextPage().click();        }    }    public static void setParam(String url, String cookies) {        Map params = new HashMap();        params.put("institutionName", "");        params.put("institutionId", "");        params.put("institutionLevelKey", "");        params.put("diseaseName", "");        params.put("diseaseId", "");        params.put("startCreateTime", "2012-12-31");        params.put("endCreateTime", "2020-03-26");        params.put("siCode", "");        params.put("insuredName", "");        params.put("undefined", "");        params.put("pageRecords", "200");        IllegalQuery.queryIllegal(url, params, cookies);    }}