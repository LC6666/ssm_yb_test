package com.iebm.ssm.appModules;import com.iebm.ssm.pageObjects.QueryDoubtfulPage;import com.iebm.ssm.util.Constant;import com.iebm.ssm.util.PageNumInfo;import com.iebm.ssm.util.Table;import com.iebm.ssm.util.UpdateAttribute;import org.openqa.selenium.support.ui.Select;import java.math.BigDecimal;/* *TODO * 疑点查询 *LC *下午3:41:06 */public class QueryDoubtful_Action {    private QueryDoubtfulPage page;    public QueryDoubtful_Action() {        // TODO Auto-generated constructor stub        page = new QueryDoubtfulPage();    }    /**     *     * @throws Exception     *             TODO 进入疑点查询页面 LC 上午10:34:30     */    public void openPage() throws Exception {        page.nav().click();        Thread.sleep(300);        page.title().click();        Thread.sleep(3000);    }    /**     * 设置查询条件查询数据     * @param startdate,enddate     * @throws Exception     */    public void setStartDate(String startdate,String enddate) throws Exception {        UpdateAttribute.removeAttribute(Constant.driver, page.startdate_input(), "readonly");        page.startdate_input().clear();        page.startdate_input().sendKeys(startdate);        UpdateAttribute.removeAttribute(Constant.driver, page.enddate_input(), "readonly");        page.enddate_input().clear();        page.enddate_input().sendKeys(enddate);    }    public void setCondition(String hospital,String hospitallevel,String disease,String handleState,String startdate,String enddate,String ruleNum,String siCode,String illegalClass,String insuredName,String enable) throws Exception {//        page.reset_btn().click();        if(hospital!=null) {            page.hospital_img().click();            HospitalSelect_Action hospitalSelect_action = new HospitalSelect_Action();            hospitalSelect_action.findHospital(hospital);        }        if(hospitallevel!=null){            Select select = new Select(page.hospital_level_select());            select.selectByVisibleText(hospitallevel);        }        if(disease!=null){            page.disease_img().click();            DiseaseSelect_Action diseaseSelect_action = new DiseaseSelect_Action();            diseaseSelect_action.finddisease(disease);        }        if(handleState!=null){            Select select = new Select(page.handleState_select());            select.selectByVisibleText(handleState);        }        if(startdate!=null){           this.setStartDate(startdate, enddate );        }        if(ruleNum!=null){            Select select = new Select(page.ruleNum_select());            select.selectByVisibleText(ruleNum);        }        if(siCode!=null){            page.siCode_input().clear();            page.siCode_input().sendKeys(siCode);        }        if(illegalClass!=null){            Select select = new Select(page.illegalClass_select());            select.selectByVisibleText(illegalClass);        }        if(insuredName!=null){            page.insuredName_input().clear();            page.insuredName_input().sendKeys(insuredName);        }        page.query_btn().click();        Thread.sleep(500);        this.queryResult(siCode);//        this.test();    }    public void queryResult(String sicode) throws Exception {        if (sicode != null) {            PageNumInfo pageInfo = new PageNumInfo(page.pageArea_table());            String totalpageNo = pageInfo.getTotalPageNo();            if (!totalpageNo.equals("0")) {                //      根据sicode查找病例                String totalPageNo = pageInfo.getTotalPageNo();                pageSearch:                for (int i = 1; i <= Integer.parseInt(totalPageNo); i++) {                    Table table = new Table(page.resultlist_table());                    int rowCount = table.getRowCount();                    for (int j = 1; j < rowCount; j++) {//                          获取表格中的病例号                        String sicode_in_td = table.getCell(j, 3).getText();                        if (sicode_in_td.equals(sicode)) {                            System.out.println("找到病例");                            break pageSearch;                        }                    }                    if (i != Integer.parseInt(totalPageNo)) {                        pageInfo.btnClick("next");                        Thread.sleep(3000);                    } else {                        System.out.println("没有找到病例" + sicode);                        return;                    }                }            } else {                System.out.println("没有找到病例" + sicode);                return;            }        }    }    /**     * 计算总费用     * @throws Exception     */    public void test() throws Exception {        PageNumInfo pageInfo = new PageNumInfo(page.pageArea_table());        String totalPageNo = pageInfo.getTotalPageNo();        BigDecimal totalmoney = BigDecimal.ZERO;        for(int i=1;i<=Integer.parseInt(totalPageNo);i++){            Table table = new Table(page.resultlist_table());            int rowCount = table.getRowCount();            for(int j=1;j<rowCount;j++){//                打印每行的疾病//                System.out.println(table.getCell(j, 7).getText());//                获取每行的违规费用                String str_money = table.getCell(j, 10).getText().replace(",", "");                BigDecimal money = new BigDecimal(str_money);                totalmoney = totalmoney.add(money);            }            if(i!=Integer.parseInt(totalPageNo)){                pageInfo.btnClick("next");                Thread.sleep(3000);            }else{                System.out.println(totalmoney.toString());                return;            }        }    }}